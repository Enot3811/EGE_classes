"""
#19 27797
Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней.
Игроки ходят по очереди, первый ход делает Петя.
За один ход игрок может добавить в одну из куч (по своему выбору) один камень
или увеличить количество камней в куче в три раза.
Например, пусть в одной куче 10 камней, а в другой 7 камней; такую позицию в игре будем обозначать (10, 7).
Тогда за один ход можно получить любую из четырёх позиций: (11, 7), (30, 7), (10, 8), (10, 21).
Для того чтобы делать ходы, у каждого игрока есть неограниченное количество камней.

Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 68.
Победителем считается игрок, сделавший последний ход, т. е. первым получивший такую позицию,
при которой в кучах будет 68 или больше камней.

В начальный момент в первой куче было шесть камней, во второй куче — S камней; 1 ≤ S ≤ 61.
Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника.
Описать стратегию игрока – значит, описать, какой ход он должен сделать в любой ситуации,
которая ему может встретиться при различной игре противника.
В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока,
не являющиеся для него безусловно выигрышными, т. е. не являющиеся выигрышными независимо от игры противника.

Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети.
Укажите минимальное значение S, когда такая ситуация возможна.
"""



s1 = 6
# Перебираем все варианты второй кучи
for s2 in range(1, 61):

    # Список из возможных камней, которые пойдут на второй ход
    next_turn = []

    # Ход Пети
    # Проверяем все ходы Пети
    # Те, в которых он не побеждает, берём на следующий ход Вани

    # Прибавить 1 можно как к первой, так и ко второй,
    # но сумма у них одна и та же
    if s1 + s2 + 1 < 68:
        # Забираем оба варианта
        next_turn.append((s1, s2 + 1))
        next_turn.append((s1 + 1, s2))
    
    # Умноижть можно первую или вторую
    if s1 + s2 * 3 < 68:
        next_turn.append((s1, s2 * 3))
    if s1 * 3 + s2 < 68:
        next_turn.append((s1 * 3, s2))

    # Ход Вани
    # Перебираем всё, что пришло с первого хода
    for i in range(len(next_turn)):
        # Распаковываем пары, которые пришли с первого хода
        # Важно в этот момент не воспользоваться переменными s1 и s2,
        # которые хранят исходные количества камней, которые мы должны написать в ответе
        current_s1, current_s2 = next_turn[i]

        # Проверяем только * 3, так как для Вани сейчас это самая выгодная операция
        # Если он побеждает, то выводим исходное количество камней,
        # при котором произошла эта победа
        if current_s1 * 3 + current_s2 >= 68:
            # Просят исходное количество камней второй кучи
            print(s2)
        if current_s1 + current_s2 * 3 >= 68:
            print(s2)

# В итоге print выведет все значения s, при которых Ваня выигрывает на второй ход
# Нам нужно только минимальное, то есть самое первое выведеное
