"""
Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней.
Игроки ходят по очереди, первый ход делает Петя.
За один ход игрок может добавить в кучу один или четыре камня
либо увеличить количество камней в куче в пять раз.
Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 19 или 75 камней.
У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.
Игра завершается в тот момент, когда количество камней в куче становится не менее 68.

Победителем считается игрок, сделавший последний ход, т. е. первым получивший кучу,
в которой будет 68 или больше камней. В начальный момент в куче было S камней; 1 ≤ S ≤ 67.

Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника.
Описать стратегию игрока — значит, описать, какой ход он должен сделать в любой ситуации,
которая ему может встретиться при различной игре противника.
В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока,
не являющиеся для него безусловно выигрышными, т. е. не являющиеся выигрышными независимо от игры противника.

Найдите два таких значения S, при которых у Пети есть выигрышная стратегия,
причём одновременно выполняются два условия:
— Петя не может выиграть за один ход;
— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.

Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.
"""


# Как и в 19-м, перебираем все доступные значения изначальных камней
for s in range(1, 68):

    # Первый ход Пети
    # Так как мы не знаем, какой из ходов будет сейчас наиболее выгоден Пете
    # мы должны рассмотреть все 3
    # Воспользуемся списком, чтобы забрать все возможные ходы на следующий ход
    first_turns = []
    
    # По условию Петя не должен выиграть на первый ход
    # *5 самый выгодный ход, поэтому проверяем его
    if s * 5 < 68:
        # Если всё ок, то забираем все возможные ходы
        first_turns.append(s + 1)
        first_turns.append(s + 4)
        first_turns.append(s * 5)

    # Ход Вани
    # Все подходящие ходы Вани будем добавлять в список для следующего хода
    second_turns = []
    # Перебираем варианты первых ходов Пети
    for x in first_turns:
        # Надо проверить, не выиграет ли Ваня с текущим вариантом хода Пети
        if x * 5 < 68:
            # Если нет, то сохраняем в список вместе все возможные ходы Вани,
            # исходящие из этого варианта
            # Все 3, потому что Петя должен выиграть несмотря на ходы Вани
            # И чтобы это проверить, надо забрать все варианты
            second_turns.append((x + 1, x + 4, x * 5))

    # Второй ход Пети
    # Перебираем то, что осталось после хода Вани
    for var1, var2, var3 in second_turns:
        # Если Петя выигрывает независимо от того, как походил Ваня на прошлом ходу
        # То это то, что мы искали
        if var1 * 5 >= 68 and var2 * 5 >= 68 and var3 * 5 >= 68:
            print(s)
