"""
#19 27802

Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней.
Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один
или четыре камня либо увеличить количество камней в куче в пять раз.
Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 19 или 75 камней.
У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.
Игра завершается в тот момент, когда количество камней в куче становится не менее 68.

Победителем считается игрок, сделавший последний ход, т.е. первым получивший кучу,
в которой будет 68 или больше камней. В начальный момент в куче было S камней; 1 ≤ S ≤ 67.
Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника.
Описать стратегию игрока — значит, описать, какой ход он должен сделать в любой ситуации,
которая ему может встретиться при различной игре противника.
В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока,
не являющиеся для него безусловно выигрышными, т.е. не являющиеся выигрышными независимо от игры противника.

Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети.
Укажите минимальное значение S, когда такая ситуация возможна.


Заметки по задаче:

По условию задачи мы должны победить на 2-й ход.
Если перевести это заявление на более близкую программированию формулировку,
то 3-й ход начинается с количеством камней больше, чем необходимо для победы.

На каждом ходу игроки могут применить 1 из 3-х возможных ходов.
Так как мы не знаем, какой из них должен предпринять Ваня, чтобы победить,
мы смоделируем ситуации для всех 3-х, и посмотрим, приведёт ли один из них Ваню к победе.

То же самое можно сказать и про "неудачный" ход Пети.
Мы не знаем, какой ход является неудачным, потому эмулируем все 3 и смотрим,
при каком из них Ваня выиграет.

В итоге получается следующее
Мы должны перебрать все допустимые значения S (1 <= S <= 67) и проэмулировать
игру с таким количеством камней.
Если текущее S позволяет Ване выиграть на 2-м ходу, то оно подходит.
Из всех подошедших необходимо выбрать минимальное.
"""


def game(x, h):
    """Эмулируем игру

    Функция вернёт True, если при заданном количестве камней есть комбинация
    ходов, при кготорой Ваня победит, и False, если нет ни одного исхода,
    при котором Ваня выигравает.

    Победа проверяется на следующий ход. То есть если Ваня походил так,
    что на 2-м ходу (h == 2) количество камней станет больше, чем 67, то
    функция вернёт True в начале следующего хода.

    Parameters
    ----------
    x : Количество камней в куче в данный момент
    h : Номер хода (отсчёт с 1)
    """
    # Если 3-й ход, то проверяем победил ли Ваня
    if h == 3:
        # Если количество камней с прошлого хода достаточно для победы
        if x >= 68:
            # То игра заканчивается победой
            return True
        # Иначе Ваня не победил на 2-й ход
        else:
            return False

    # По условию Ваня должен победить на 2-й ход, то есть при проверке в начале
    # 3-го хода.
    # Но если игра закончилась раньше этой проверки,
    elif x >= 68 and h < 3:
        # то Петя победил на прошлом ходу
        return False
    
    # Если же мы ещё не дошли до 3-го хода и игра продолжается
    else:
        # То вызываем следующий ход h + 1
        # со всеми доступными комбинациями камней
        return game(x + 1, h + 1) or game(x + 4, h + 1) or game(x * 5, h + 1)


# Перебираем все возможные количества камней
for x in range(1, 68):
    # Начинаем игру с первого хода и с текущим количеством камней
    answer = game(x, 1)
    # Если ответ True (мы победили)
    if answer:
        # Смотрим на x
        print(x)
