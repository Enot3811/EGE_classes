"""
#23 13418
Исполнитель НечетМ преобразует число на экране. У исполнителя НечетМ две команды,
которым присвоены номера:

1. прибавь 1
2. сделай нечётное

Первая из этих команд увеличивает число x на экране на 1,
вторая переводит число x в число 2x+1.
Например, вторая команда переводит число 10 в число 21.
Программа для исполнителя НечетМ – это последовательность команд.

Сколько существует таких программ, которые число 1 преобразуют в число 27,
причём траектория вычислений не содержит число 26?

Траектория вычислений программы – это последовательность результатов выполнения
всех команд программы. Например, для программы 121 при исходном числе 7 траектория
будет состоять из чисел 8, 17, 18.
"""

# К этому типу справедлива вся теория из 4-го типа, но с дополнением в виде
# избегаемого узла.

# Чтобы посчитать количество путей, не проходящих через узел, нам необходимо
# просто не ветвить те узлы, которые окажутся равны избегаемому числу


tree_nodes = [1]
answer = 0

while len(tree_nodes) != 0:
    current_node = tree_nodes.pop(0)
    
    next_node = current_node + 1
    # К обычной проверке для добавления нового узла для дальнейшего ветвления
    # добавляется дополнительное условие, что этот узел не должен быть избегаемым
    if next_node < 27 and next_node != 26:
        tree_nodes.append(next_node)
    elif next_node == 27:
        answer += 1

    next_node = current_node * 2 + 1
    if next_node < 27 and next_node != 26:
        tree_nodes.append(next_node)
    elif next_node == 27:
        answer += 1
        
print(answer)
